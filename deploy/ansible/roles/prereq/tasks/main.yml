---
# 系统预检role - 检查系统环境、架构、依赖等

- name: 检测系统架构
  script: ../../../scripts/detect-arch.sh json
  register: system_info_result
  changed_when: false
  tags: [prereq, architecture]

- name: 解析系统信息
  set_fact:
    system_info: "{{ system_info_result.stdout | from_json }}"
  tags: [prereq, architecture]

- name: 显示检测到的系统信息
  debug:
    msg: |
      系统架构: {{ system_info.architecture }}
      操作系统: {{ system_info.os }}
      内核版本: {{ system_info.kernel }}
      主机名: {{ system_info.hostname }}
  tags: [prereq, architecture]

- name: 验证架构支持
  fail:
    msg: "不支持的架构: {{ system_info.architecture }}，仅支持 amd64 和 arm64"
  when: system_info.architecture not in ['amd64', 'arm64']
  tags: [prereq, architecture]

- name: 检查内存大小
  shell: |
    total_mem=$(free -m | awk '/^Mem:/{print $2}')
    echo $total_mem
  register: memory_mb
  changed_when: false
  tags: [prereq, system]

- name: 验证内存要求
  fail:
    msg: "系统内存不足，需要至少4GB内存，当前: {{ memory_mb.stdout }}MB"
  when: memory_mb.stdout | int < 4096
  tags: [prereq, system]

- name: 检查磁盘空间
  shell: |
    available_space=$(df {{ miniodb.install_dir | default('/opt/miniodb') }} | awk 'NR==2{print $4}')
    echo $((available_space / 1024))
  register: disk_space_mb
  changed_when: false
  tags: [prereq, system]

- name: 验证磁盘空间
  fail:
    msg: "磁盘空间不足，需要至少10GB空间，当前: {{ disk_space_mb.stdout }}MB"
  when: disk_space_mb.stdout | int < 10240
  tags: [prereq, system]

- name: 检查必要的系统命令
  command: which {{ item }}
  register: command_check
  failed_when: command_check.rc != 0
  changed_when: false
  loop:
    - curl
    - tar
    - systemctl
    - useradd
    - groupadd
  tags: [prereq, commands]

- name: 检查网络连接性（在线安装时）
  uri:
    url: "https://dl.min.io/server/minio/release/linux-{{ system_info.architecture }}/minio"
    method: HEAD
    timeout: 10
  when: deployment_mode | default('offline') == 'online'
  tags: [prereq, network]

- name: 创建minio用户
  user:
    name: minio
    system: true
    shell: /bin/false
    home: /opt/miniodb/data/minio
    create_home: false
  become: true
  tags: [prereq, users]

- name: 创建redis用户
  user:
    name: redis
    system: true
    shell: /bin/false
    home: /opt/miniodb/data/redis
    create_home: false
  become: true
  tags: [prereq, users]

- name: 创建miniodb用户
  user:
    name: miniodb
    system: true
    shell: /bin/false
    home: /opt/miniodb
    create_home: false
  become: true
  tags: [prereq, users]

- name: 创建基础目录结构
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  become: true
  loop:
    - { path: "/opt/miniodb", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/opt/miniodb/bin", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/opt/miniodb/config", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/opt/miniodb/logs", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/opt/miniodb/data", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/opt/miniodb/data/minio", owner: "minio", group: "minio", mode: "0755" }
    - { path: "/opt/miniodb/data/redis", owner: "redis", group: "redis", mode: "0755" }
    - { path: "/etc/miniodb", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/var/log/miniodb", owner: "miniodb", group: "miniodb", mode: "0755" }
    - { path: "/var/log/redis", owner: "redis", group: "redis", mode: "0755" }
  tags: [prereq, directories]

- name: 检查防火墙状态
  systemd:
    name: firewalld
  register: firewall_status
  ignore_errors: true
  tags: [prereq, firewall]

- name: 开放MinIO端口
  firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - "9000/tcp"  # MinIO API
    - "9001/tcp"  # MinIO Console
  when: 
    - firewall_status.status is defined
    - firewall_status.status.ActiveState == "active"
    - configure_firewall | default(true)
  become: true
  tags: [prereq, firewall]

- name: 开放Redis端口
  firewalld:
    port: "6379/tcp"
    permanent: true
    state: enabled
    immediate: true
  when: 
    - firewall_status.status is defined
    - firewall_status.status.ActiveState == "active"
    - configure_firewall | default(true)
  become: true
  tags: [prereq, firewall]

- name: 开放MinIODB端口
  firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - "8080/tcp"  # gRPC
    - "8081/tcp"  # REST API
    - "9090/tcp"  # Metrics
  when: 
    - firewall_status.status is defined
    - firewall_status.status.ActiveState == "active"
    - configure_firewall | default(true)
  become: true
  tags: [prereq, firewall]

- name: 安装依赖包
  package:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - curl
    - tar
    - unzip
    - wget
    - net-tools
  ignore_errors: true
  tags: [prereq, packages]

- name: 保存检测结果
  set_fact:
    prereq_results:
      architecture: "{{ system_info.architecture }}"
      os: "{{ system_info.os }}"
      memory_mb: "{{ memory_mb.stdout | int }}"
      disk_space_mb: "{{ disk_space_mb.stdout | int }}"
  tags: [prereq]

- name: 显示预检完成信息
  debug:
    msg: |
      ✅ 系统预检完成！
      
      系统信息:
      - 架构: {{ prereq_results.architecture }}
      - 操作系统: {{ prereq_results.os }}
      - 内存: {{ prereq_results.memory_mb }}MB
      - 磁盘空间: {{ prereq_results.disk_space_mb }}MB
      
      ✅ 系统满足MinIODB部署要求
  tags: [prereq] 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: miniodb
  namespace: miniodb-system
  labels:
    app.kubernetes.io/name: miniodb
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: miniodb-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: miniodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: miniodb
        app.kubernetes.io/component: application
    spec:
      containers:
      - name: miniodb
        image: miniodb:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: grpc
        env:
        # Redis 配置
        - name: REDIS_HOST
          value: "redis-service.miniodb-system.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: redis-password
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: redis-db
        
        # MinIO 配置
        - name: MINIO_ENDPOINT
          value: "minio-service.miniodb-system.svc.cluster.local:9000"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-secret-key
        - name: MINIO_BUCKET
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: minio-bucket
        - name: MINIO_USE_SSL
          value: "false"
        
        # MinIO 备份配置
        - name: MINIO_BACKUP_ENDPOINT
          value: "minio-backup-service.miniodb-system.svc.cluster.local:9000"
        - name: MINIO_BACKUP_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-backup-access-key
        - name: MINIO_BACKUP_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-backup-secret-key
        - name: MINIO_BACKUP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: minio-backup-bucket
        
        # 服务器配置
        - name: SERVER_HOST
          value: "0.0.0.0"
        - name: SERVER_PORT
          value: "8080"
        - name: GRPC_PORT
          value: "9090"
        
        # 认证配置
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: jwt-secret
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: jwt-expires-in
        
        # 日志配置
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: log-level
        - name: LOG_FORMAT
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: log-format
        
        # 应用配置
        - name: APP_ENV
          value: "production"
        - name: APP_DEBUG
          value: "false"
        
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: logs
          mountPath: /app/logs
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      
      volumes:
      - name: app-config
        configMap:
          name: miniodb-config
      - name: logs
        emptyDir: {}
      
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        fsGroup: 1000
      
      # 确保依赖服务已经就绪
      initContainers:
      - name: wait-for-redis
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z redis-service.miniodb-system.svc.cluster.local 6379; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
      - name: wait-for-minio
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z minio-service.miniodb-system.svc.cluster.local 9000; do
            echo "Waiting for MinIO..."
            sleep 2
          done
          echo "MinIO is ready!"
      - name: wait-for-minio-backup
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          until nc -z minio-backup-service.miniodb-system.svc.cluster.local 9000; do
            echo "Waiting for MinIO Backup..."
            sleep 2
          done
          echo "MinIO Backup is ready!"

---
apiVersion: v1
kind: Service
metadata:
  name: miniodb-service
  namespace: miniodb-system
  labels:
    app.kubernetes.io/name: miniodb
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: miniodb-system
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: grpc
  selector:
    app.kubernetes.io/name: miniodb

---
# MinIODB External Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: miniodb-external
  namespace: miniodb-system
  labels:
    app.kubernetes.io/name: miniodb
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: miniodb-system
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
    nodePort: 30080
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: grpc
    nodePort: 30090
  selector:
    app.kubernetes.io/name: miniodb 
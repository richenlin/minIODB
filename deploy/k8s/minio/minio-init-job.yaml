apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-init-script
  namespace: miniodb-system
  labels:
    app.kubernetes.io/name: minio-init
    app.kubernetes.io/component: init
    app.kubernetes.io/part-of: miniodb-system
data:
  init-minio.sh: |
    #!/bin/bash
    
    # MinIO 初始化脚本 - Kubernetes 版本
    # 用于自动创建存储桶和设置相关配置
    
    set -e
    
    # 颜色输出
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
    
    log_info() {
        echo -e "${BLUE}[INFO]${NC} $1"
    }
    
    log_success() {
        echo -e "${GREEN}[SUCCESS]${NC} $1"
    }
    
    log_warning() {
        echo -e "${YELLOW}[WARNING]${NC} $1"
    }
    
    log_error() {
        echo -e "${RED}[ERROR]${NC} $1"
    }
    
    # 环境变量默认值
    MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
    MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
    MINIO_BACKUP_USER=${MINIO_BACKUP_USER:-minioadmin}
    MINIO_BACKUP_PASSWORD=${MINIO_BACKUP_PASSWORD:-minioadmin123}
    MINIO_BUCKET=${MINIO_BUCKET:-miniodb-data}
    MINIO_BACKUP_BUCKET=${MINIO_BACKUP_BUCKET:-miniodb-backup}
    
    # MinIO 服务地址 (Kubernetes 内部服务)
    MINIO_PRIMARY_URL="http://minio-service.miniodb-system.svc.cluster.local:9000"
    MINIO_BACKUP_URL="http://minio-backup-service.miniodb-system.svc.cluster.local:9000"
    
    # 最大重试次数和等待时间
    MAX_RETRIES=30
    RETRY_INTERVAL=5
    
    log_info "Starting MinIO initialization..."
    log_info "Primary MinIO: ${MINIO_PRIMARY_URL}"
    log_info "Backup MinIO: ${MINIO_BACKUP_URL}"
    log_info "Primary bucket: ${MINIO_BUCKET}"
    log_info "Backup bucket: ${MINIO_BACKUP_BUCKET}"
    
    # 等待MinIO服务启动
    wait_for_minio() {
        local url=$1
        local name=$2
        local retries=0
        
        log_info "Waiting for ${name} to be ready..."
        
        while [ $retries -lt $MAX_RETRIES ]; do
            if curl -f -s "${url}/minio/health/live" > /dev/null 2>&1; then
                log_success "${name} is ready!"
                return 0
            fi
            
            retries=$((retries + 1))
            log_info "Attempt ${retries}/${MAX_RETRIES}: ${name} not ready yet, waiting ${RETRY_INTERVAL}s..."
            sleep $RETRY_INTERVAL
        done
        
        log_error "${name} failed to start after ${MAX_RETRIES} attempts"
        return 1
    }
    
    # 配置MinIO客户端别名
    configure_aliases() {
        log_info "Configuring MinIO client aliases..."
        
        # 配置主MinIO
        if mc alias set minio "${MINIO_PRIMARY_URL}" "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"; then
            log_success "Primary MinIO alias configured"
        else
            log_error "Failed to configure primary MinIO alias"
            return 1
        fi
        
        # 配置备份MinIO
        if mc alias set minio-backup "${MINIO_BACKUP_URL}" "${MINIO_BACKUP_USER}" "${MINIO_BACKUP_PASSWORD}"; then
            log_success "Backup MinIO alias configured"
        else
            log_error "Failed to configure backup MinIO alias"
            return 1
        fi
    }
    
    # 创建存储桶
    create_bucket() {
        local alias=$1
        local bucket=$2
        local description=$3
        
        log_info "Creating bucket '${bucket}' on ${description}..."
        
        if mc mb "${alias}/${bucket}" --ignore-existing; then
            log_success "Bucket '${bucket}' created/verified on ${description}"
        else
            log_error "Failed to create bucket '${bucket}' on ${description}"
            return 1
        fi
    }
    
    # 设置存储桶策略
    set_bucket_policy() {
        local alias=$1
        local bucket=$2
        local policy=$3
        local description=$4
        
        log_info "Setting policy '${policy}' for bucket '${bucket}' on ${description}..."
        
        if mc policy set "${policy}" "${alias}/${bucket}"; then
            log_success "Policy '${policy}' set for bucket '${bucket}' on ${description}"
        else
            log_warning "Failed to set policy for bucket '${bucket}' on ${description}"
        fi
    }
    
    # 设置存储桶版本控制
    set_bucket_versioning() {
        local alias=$1
        local bucket=$2
        local description=$3
        
        log_info "Enabling versioning for bucket '${bucket}' on ${description}..."
        
        if mc version enable "${alias}/${bucket}"; then
            log_success "Versioning enabled for bucket '${bucket}' on ${description}"
        else
            log_warning "Failed to enable versioning for bucket '${bucket}' on ${description}"
        fi
    }
    
    # 验证存储桶状态
    verify_bucket() {
        local alias=$1
        local bucket=$2
        local description=$3
        
        log_info "Verifying bucket '${bucket}' on ${description}..."
        
        if mc ls "${alias}/${bucket}" > /dev/null 2>&1; then
            log_success "Bucket '${bucket}' is accessible on ${description}"
            return 0
        else
            log_error "Bucket '${bucket}' is not accessible on ${description}"
            return 1
        fi
    }
    
    # 主函数
    main() {
        log_info "=== MinIO Initialization Started ==="
        
        # 等待MinIO服务启动
        if ! wait_for_minio "${MINIO_PRIMARY_URL}" "Primary MinIO"; then
            exit 1
        fi
        
        if ! wait_for_minio "${MINIO_BACKUP_URL}" "Backup MinIO"; then
            exit 1
        fi
        
        # 配置别名
        if ! configure_aliases; then
            exit 1
        fi
        
        # 创建主存储桶
        if ! create_bucket "minio" "${MINIO_BUCKET}" "Primary MinIO"; then
            exit 1
        fi
        
        # 创建备份存储桶
        if ! create_bucket "minio-backup" "${MINIO_BACKUP_BUCKET}" "Backup MinIO"; then
            exit 1
        fi
        
        # 设置存储桶策略
        set_bucket_policy "minio" "${MINIO_BUCKET}" "download" "Primary MinIO"
        set_bucket_policy "minio-backup" "${MINIO_BACKUP_BUCKET}" "download" "Backup MinIO"
        
        # 启用版本控制
        set_bucket_versioning "minio" "${MINIO_BUCKET}" "Primary MinIO"
        set_bucket_versioning "minio-backup" "${MINIO_BACKUP_BUCKET}" "Backup MinIO"
        
        # 验证存储桶
        if ! verify_bucket "minio" "${MINIO_BUCKET}" "Primary MinIO"; then
            exit 1
        fi
        
        if ! verify_bucket "minio-backup" "${MINIO_BACKUP_BUCKET}" "Backup MinIO"; then
            exit 1
        fi
        
        log_success "=== MinIO Initialization Completed Successfully ==="
        
        # 显示总结信息
        echo ""
        log_info "=== Initialization Summary ==="
        log_info "Primary MinIO URL: ${MINIO_PRIMARY_URL}"
        log_info "Primary Bucket: ${MINIO_BUCKET}"
        log_info "Backup MinIO URL: ${MINIO_BACKUP_URL}"
        log_info "Backup Bucket: ${MINIO_BACKUP_BUCKET}"
        log_info "Versioning: Enabled"
        echo ""
    }
    
    # 错误处理
    trap 'log_error "Script interrupted"; exit 1' INT TERM
    
    # 执行主函数
    main "$@"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-init
  namespace: miniodb-system
  labels:
    app.kubernetes.io/name: minio-init
    app.kubernetes.io/component: init
    app.kubernetes.io/part-of: miniodb-system
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio-init
        app.kubernetes.io/component: init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-init
        image: minio/mc:latest
        command: ["/bin/bash", "/scripts/init-minio.sh"]
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-access-key
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-secret-key
        - name: MINIO_BACKUP_USER
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-backup-access-key
        - name: MINIO_BACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: miniodb-secrets
              key: minio-backup-secret-key
        - name: MINIO_BUCKET
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: minio-bucket
        - name: MINIO_BACKUP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: miniodb-config
              key: minio-backup-bucket
        volumeMounts:
        - name: init-script
          mountPath: /scripts
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: init-script
        configMap:
          name: minio-init-script
          defaultMode: 0755
      securityContext:
        runAsUser: 1000
        runAsNonRoot: true
        fsGroup: 1000
  backoffLimit: 3
  activeDeadlineSeconds: 600 
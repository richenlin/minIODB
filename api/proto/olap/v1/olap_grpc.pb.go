// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: api/proto/olap/v1/olap.proto

package olapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OlapServiceClient is the client API for OlapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OlapServiceClient interface {
	// 写入数据
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// 执行查询
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// 手动触发数据备份
	TriggerBackup(ctx context.Context, in *TriggerBackupRequest, opts ...grpc.CallOption) (*TriggerBackupResponse, error)
	// 从备份节点恢复数据
	RecoverData(ctx context.Context, in *RecoverDataRequest, opts ...grpc.CallOption) (*RecoverDataResponse, error)
}

type olapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOlapServiceClient(cc grpc.ClientConnInterface) OlapServiceClient {
	return &olapServiceClient{cc}
}

func (c *olapServiceClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/olap.v1.OlapService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *olapServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/olap.v1.OlapService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *olapServiceClient) TriggerBackup(ctx context.Context, in *TriggerBackupRequest, opts ...grpc.CallOption) (*TriggerBackupResponse, error) {
	out := new(TriggerBackupResponse)
	err := c.cc.Invoke(ctx, "/olap.v1.OlapService/TriggerBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *olapServiceClient) RecoverData(ctx context.Context, in *RecoverDataRequest, opts ...grpc.CallOption) (*RecoverDataResponse, error) {
	out := new(RecoverDataResponse)
	err := c.cc.Invoke(ctx, "/olap.v1.OlapService/RecoverData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OlapServiceServer is the server API for OlapService service.
// All implementations must embed UnimplementedOlapServiceServer
// for forward compatibility
type OlapServiceServer interface {
	// 写入数据
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// 执行查询
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// 手动触发数据备份
	TriggerBackup(context.Context, *TriggerBackupRequest) (*TriggerBackupResponse, error)
	// 从备份节点恢复数据
	RecoverData(context.Context, *RecoverDataRequest) (*RecoverDataResponse, error)
	mustEmbedUnimplementedOlapServiceServer()
}

// UnimplementedOlapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOlapServiceServer struct {
}

func (UnimplementedOlapServiceServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedOlapServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedOlapServiceServer) TriggerBackup(context.Context, *TriggerBackupRequest) (*TriggerBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerBackup not implemented")
}
func (UnimplementedOlapServiceServer) RecoverData(context.Context, *RecoverDataRequest) (*RecoverDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverData not implemented")
}
func (UnimplementedOlapServiceServer) mustEmbedUnimplementedOlapServiceServer() {}

// UnsafeOlapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OlapServiceServer will
// result in compilation errors.
type UnsafeOlapServiceServer interface {
	mustEmbedUnimplementedOlapServiceServer()
}

func RegisterOlapServiceServer(s grpc.ServiceRegistrar, srv OlapServiceServer) {
	s.RegisterService(&OlapService_ServiceDesc, srv)
}

func _OlapService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OlapServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olap.v1.OlapService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OlapServiceServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OlapService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OlapServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olap.v1.OlapService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OlapServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OlapService_TriggerBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OlapServiceServer).TriggerBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olap.v1.OlapService/TriggerBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OlapServiceServer).TriggerBackup(ctx, req.(*TriggerBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OlapService_RecoverData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OlapServiceServer).RecoverData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olap.v1.OlapService/RecoverData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OlapServiceServer).RecoverData(ctx, req.(*RecoverDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OlapService_ServiceDesc is the grpc.ServiceDesc for OlapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OlapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olap.v1.OlapService",
	HandlerType: (*OlapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _OlapService_Write_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _OlapService_Query_Handler,
		},
		{
			MethodName: "TriggerBackup",
			Handler:    _OlapService_TriggerBackup_Handler,
		},
		{
			MethodName: "RecoverData",
			Handler:    _OlapService_RecoverData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/olap/v1/olap.proto",
}

syntax = "proto3";

package olap.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./;olapv1";

service OlapService {
  // 写入数据
  rpc Write (WriteRequest) returns (WriteResponse);
  // 执行查询
  rpc Query (QueryRequest) returns (QueryResponse);
  // 手动触发数据备份
  rpc TriggerBackup(TriggerBackupRequest) returns (TriggerBackupResponse);
  // 从备份节点恢复数据
  rpc RecoverData(RecoverDataRequest) returns (RecoverDataResponse);
  // 健康检查
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  // 获取系统统计信息
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
  // 获取集群节点信息
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
  
  // 表管理接口
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
  rpc DropTable(DropTableRequest) returns (DropTableResponse);
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse);
  rpc DescribeTable(DescribeTableRequest) returns (DescribeTableResponse);
  
  // 元数据管理接口
  rpc TriggerMetadataBackup(TriggerMetadataBackupRequest) returns (TriggerMetadataBackupResponse);
  rpc ListMetadataBackups(ListMetadataBackupsRequest) returns (ListMetadataBackupsResponse);
  rpc RecoverMetadata(RecoverMetadataRequest) returns (RecoverMetadataResponse);
  rpc GetMetadataStatus(GetMetadataStatusRequest) returns (MetadataStatusResponse);
  rpc ValidateMetadataBackup(ValidateMetadataBackupRequest) returns (ValidateMetadataBackupResponse);
}

message WriteRequest {
  string table = 1;                    // 表名（新增，可选，默认为"default"）
  string id = 2;                       // 记录ID
  google.protobuf.Timestamp timestamp = 3;  // 时间戳
  google.protobuf.Struct payload = 4;  // 数据载荷
}

message WriteResponse {
  bool success = 1;
  string message = 2;
}

message QueryRequest {
  string sql = 1;
}

message QueryResponse {
  // 结果可以用JSON字符串或者更复杂的结构表示
  string result_json = 1;
}

// 表管理消息定义

// 创建表
message CreateTableRequest {
  string table_name = 1;
  TableConfig config = 2;
  bool if_not_exists = 3;
}

message CreateTableResponse {
  bool success = 1;
  string message = 2;
}

// 删除表
message DropTableRequest {
  string table_name = 1;
  bool if_exists = 2;
  bool cascade = 3;  // 是否级联删除数据
}

message DropTableResponse {
  bool success = 1;
  string message = 2;
  int32 files_deleted = 3;
}

// 列出表
message ListTablesRequest {
  string pattern = 1;  // 表名模式匹配
}

message ListTablesResponse {
  repeated TableInfo tables = 1;
  int32 total = 2;
}

// 表描述
message DescribeTableRequest {
  string table_name = 1;
}

message DescribeTableResponse {
  TableInfo table_info = 1;
  TableStats stats = 2;
}

// 表信息
message TableInfo {
  string name = 1;
  TableConfig config = 2;
  string created_at = 3;
  string last_write = 4;
  string status = 5;  // active, archived, deleting
}

// 表配置
message TableConfig {
  int32 buffer_size = 1;
  int32 flush_interval_seconds = 2;
  int32 retention_days = 3;
  bool backup_enabled = 4;
  map<string, string> properties = 5;
}

// 表统计
message TableStats {
  int64 record_count = 1;
  int64 file_count = 2;
  int64 size_bytes = 3;
  string oldest_record = 4;
  string newest_record = 5;
}

message TriggerBackupRequest {
  string id = 1;
  string day = 2; // format: YYYY-MM-DD
}

message TriggerBackupResponse {
  bool success = 1;
  string message = 2;
  int32 files_backed_up = 3;
}

message RecoverDataRequest {
  // 恢复模式：可以按ID范围、时间范围或节点ID恢复
  oneof recovery_mode {
    string node_id = 1;        // 恢复特定节点的所有数据
    IdRangeFilter id_range = 2; // 恢复特定ID范围的数据
    TimeRangeFilter time_range = 3; // 恢复特定时间范围的数据
  }
  bool force_overwrite = 4; // 是否强制覆盖已存在的数据
}

message IdRangeFilter {
  repeated string ids = 1;     // 具体的ID列表
  string id_pattern = 2;       // ID模式匹配，如 "user-*"
}

message TimeRangeFilter {
  string start_date = 1;       // 开始日期 YYYY-MM-DD
  string end_date = 2;         // 结束日期 YYYY-MM-DD
  repeated string ids = 3;     // 可选：限制特定ID
}

message RecoverDataResponse {
  bool success = 1;
  string message = 2;
  int32 files_recovered = 3;
  repeated string recovered_keys = 4; // 恢复的数据键列表
}

message HealthCheckRequest {
  // 健康检查请求，暂无特殊参数
}

message HealthCheckResponse {
  string status = 1;     // 健康状态：healthy, unhealthy
  string timestamp = 2;  // 检查时间戳
  string version = 3;    // 服务版本
  map<string, string> details = 4; // 详细信息
}

message GetStatsRequest {
  // 获取统计信息请求，暂无特殊参数
}

message GetStatsResponse {
  string timestamp = 1;  // 统计时间戳
  map<string, int64> buffer_stats = 2;  // 缓冲区统计
  map<string, int64> redis_stats = 3;   // Redis统计
  map<string, int64> minio_stats = 4;   // MinIO统计
}

message GetNodesRequest {
  // 获取节点信息请求，暂无特殊参数
}

message NodeInfo {
  string id = 1;         // 节点ID
  string status = 2;     // 节点状态
  string type = 3;       // 节点类型
  string address = 4;    // 节点地址
  int64 last_seen = 5;   // 最后活跃时间
}

message GetNodesResponse {
  repeated NodeInfo nodes = 1;  // 节点列表
  int32 total = 2;             // 节点总数
}

// 元数据管理消息定义

// 触发元数据备份
message TriggerMetadataBackupRequest {
  bool force = 1;  // 是否强制备份
}

message TriggerMetadataBackupResponse {
  bool success = 1;
  string message = 2;
  string backup_id = 3;
}

// 列出元数据备份
message ListMetadataBackupsRequest {
  int32 days = 1;  // 查询多少天内的备份，默认30天
}

message ListMetadataBackupsResponse {
  repeated MetadataBackupInfo backups = 1;
  int32 total = 2;
}

message MetadataBackupInfo {
  string id = 1;
  string timestamp = 2;
  int64 size = 3;
  string status = 4;
  string description = 5;
}

// 恢复元数据
message RecoverMetadataRequest {
  string backup_file = 1;  // 备份文件名，为空则使用最新备份
  string mode = 2;         // 恢复模式：dry_run, complete
  bool force_overwrite = 3; // 是否强制覆盖
  bool backup_current = 4;  // 恢复前是否备份当前数据
}

message RecoverMetadataResponse {
  bool success = 1;
  string message = 2;
  int32 recovered_items = 3;
  repeated string recovered_keys = 4;
  repeated string warnings = 5;
}

// 获取元数据状态
message GetMetadataStatusRequest {
  // 获取元数据状态请求，暂无特殊参数
}

message MetadataStatusResponse {
  string status = 1;  // 状态：healthy, degraded, error
  string last_backup = 2;
  string next_backup = 3;
  int32 total_entries = 4;
  map<string, int32> type_counts = 5;
}

// 验证元数据备份
message ValidateMetadataBackupRequest {
  string backup_file = 1;  // 要验证的备份文件
}

message ValidateMetadataBackupResponse {
  bool valid = 1;
  string message = 2;
  repeated string errors = 3;
}
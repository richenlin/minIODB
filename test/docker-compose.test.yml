version: '3.8'

services:
  # MinIODB 主服务
  miniodb:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "8080:8080"   # gRPC
      - "8081:8081"   # REST API
      - "9090:9090"   # Metrics
    environment:
      - NODE_ID=test-node-1
      - GRPC_PORT=8080
      - REST_PORT=8081
      - METRICS_PORT=9090
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BACKUP_ENDPOINT=http://minio-backup:9000
      - MINIO_BACKUP_ACCESS_KEY=minioadmin
      - MINIO_BACKUP_SECRET_KEY=minioadmin
      - LOG_LEVEL=info
      - BUFFER_SIZE=1000
      - FLUSH_INTERVAL=30s
      - BACKUP_INTERVAL=5m
      - RETENTION_DAYS=7
      - AUTH_ENABLED=false
      - JWT_SECRET=test-secret-key
      - MAX_CONNECTIONS=100
    depends_on:
      - redis
      - minio
      - minio-backup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - miniodb_data:/data
    networks:
      - miniodb-test

  # Redis 服务
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - miniodb-test

  # MinIO 主存储
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - minio_data:/data
    networks:
      - miniodb-test

  # MinIO 备份存储
  minio-backup:
    image: minio/minio:latest
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - minio_backup_data:/data
    networks:
      - miniodb-test

  # MinIO 初始化器
  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
      - minio-backup
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BACKUP_ENDPOINT=http://minio-backup:9000
      - MINIO_BACKUP_ACCESS_KEY=minioadmin
      - MINIO_BACKUP_SECRET_KEY=minioadmin
    entrypoint: |
      /bin/sh -c "
      # 等待 MinIO 启动
      until mc alias set minio http://minio:9000 minioadmin minioadmin; do
        echo 'Waiting for MinIO...'
        sleep 2
      done
      
      until mc alias set minio-backup http://minio-backup:9000 minioadmin minioadmin; do
        echo 'Waiting for MinIO Backup...'
        sleep 2
      done
      
      # 创建必要的存储桶
      mc mb minio/miniodb-data --ignore-existing
      mc mb minio/miniodb-metadata --ignore-existing
      mc mb minio-backup/miniodb-backup --ignore-existing
      mc mb minio-backup/miniodb-metadata-backup --ignore-existing
      
      # 设置存储桶策略
      mc anonymous set public minio/miniodb-data
      mc anonymous set public minio/miniodb-metadata
      mc anonymous set public minio-backup/miniodb-backup
      mc anonymous set public minio-backup/miniodb-metadata-backup
      
      echo 'MinIO initialization completed'
      "
    networks:
      - miniodb-test

volumes:
  miniodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  minio_backup_data:
    driver: local

networks:
  miniodb-test:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 